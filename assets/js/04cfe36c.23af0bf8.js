"use strict";(self.webpackChunkacp_documentation=self.webpackChunkacp_documentation||[]).push([[9581],{5277:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Guides/Software/Conda","title":"Conda","description":"You dont want to ask us to install the new software you want? That is cool! I was like that too. And conda should be one of your best friend, or maybe docker and singularity images. If you have enough storage space, go ahead. Say I want to install a software called trimmomatic. Get more info about the conda channels that contain this software. By googling, I know it is in bioconda. So, from the login node, just straight:","source":"@site/docs/Guides/Software/Conda.mdx","sourceDirName":"Guides/Software","slug":"/Guides/Software/Conda","permalink":"/acp-documentation/Guides/Software/Conda","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"ZarulHanifah","lastUpdatedAt":1755108236000,"sidebarPosition":3,"frontMatter":{"title":"Conda","sidebar_position":3},"sidebar":"guidesSidebar","previous":{"title":"Helpful commands on ACP","permalink":"/acp-documentation/Guides/Software/Helpful-commands-on-ACP"},"next":{"title":"Python on ACP","permalink":"/acp-documentation/Guides/Software/Python-on-ACP"}}');var a=n(4848),i=n(8453);const s={title:"Conda",sidebar_position:3},r=void 0,c={},d=[];function u(t){const e={code:"code",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["You dont want to ask us to install the new software you want? That is cool! I was like that too. And conda should be one of your best friend, or maybe docker and singularity images. If you have enough storage space, go ahead. Say I want to install a software called trimmomatic. Get more info about the conda channels that contain this software. By googling, I know it is in ",(0,a.jsx)(e.code,{children:"bioconda"}),". So, from the login node, just straight:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Im creating a new conda environment, named it trimmo.\n# Softwares usually contain dependencies, and usually conda-forge channel have them. Just a habit of mine.\nconda create -n trimmo -c bioconda -c conda-forge trimmomatic\n"})}),"\n",(0,a.jsx)(e.p,{children:"A bit of test-driving here:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Activate the environment to acces the software\nconda activate trimmo\n\n# Test it out, can you find trimmomatic?\n$ trimmomatic \nUsage: \n       PE [-version] [-threads <threads>] [-phred33|-phred64] [-trimlog <trimLogFile>] [-summary <statsSummaryFile>] [-quiet] [-validatePairs] [-basein <inputBase> | <inputFile1> <inputFile2>] [-baseout <outputBase> | <outputFile1P> <outputFile1U> <outputFile2P> <outputFile2U>] <trimmer1>...\n   or: \n       SE [-version] [-threads <threads>] [-phred33|-phred64] [-trimlog <trimLogFile>] [-summary <statsSummaryFile>] [-quiet] <inputFile> <outputFile> <trimmer1>...\n   or: \n       -version\n\n# Deactivate the environment once you done with it\n# You will notice the conda env name is not in your prompt\nconda deactivate\n\n# Can you access trimmomatic without activating the trimmo env?\n-bash: trimmomatic: command not found\n\n"})})]})}function m(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(u,{...t})}):u(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>r});var o=n(6540);const a={},i=o.createContext(a);function s(t){const e=o.useContext(i);return o.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),o.createElement(i.Provider,{value:e},t.children)}}}]);